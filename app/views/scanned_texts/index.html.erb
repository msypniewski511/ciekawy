<h1>Scanned Texts</h1>

<!-- Camera feed -->
<video id="camera" autoplay style="width: 100%; max-height: 300px; border: 1px solid black;"></video>
<br>
<button id="capture-button" class="btn btn-primary">Capture Text</button>
<button id="search-button" class="btn btn-primary">Search Code</button>

<p>Scanned Text: <span id="scanned-text">Waiting...</span></p>

<!-- Form to submit the recognized text -->
<%= form_with url: scanned_texts_path, method: :post, remote: true do %>
  <%= hidden_field_tag :content, '', id: 'hidden-content' %>
  <%= submit_tag 'Save to Database', id: 'save-button', disabled: true, class: 'btn btn-success' %>
<% end %>

<hr>

<!-- List of previously saved texts -->
<table class="table table-dark table-striped" id="table">
  <thead>
    <tr>
      <th>Nr.</th>
      <th>Scanned Text</th>
      <th>Found</th>
    </tr>
  </thead>
  <tbody>
    <% @scanned_texts.each_with_index do |scanned_text, i| %>
      <tr id="row-<%= i %>">
        <td><%= i+1 %></td><td class="barcode"><%= scanned_text %><td>n/a</td>
      </tr>
    <% end %>
  </tbody>
</table>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const video = document.getElementById('camera');
    const captureButton = document.getElementById('capture-button');
    const scannedTextElement = document.getElementById('scanned-text');
    const hiddenContentField = document.getElementById('hidden-content');
    const saveButton = document.getElementById('save-button');

    // Access the phone's camera
    const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
    video.srcObject = stream;

    // Capture and process text when button is clicked
    captureButton.addEventListener('click', async () => {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      // Draw video frame onto canvas
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Extract text using Tesseract.js
      const { data: { text } } = await Tesseract.recognize(canvas, 'eng', {
        logger: info => console.log(info), // Log OCR progress
      });

      // Display the scanned text and enable the save button
      scannedTextElement.textContent = text.trim();
      hiddenContentField.value = text.trim();
      saveButton.disabled = false;
    });
  });
</script>

# ----------------------------------------------------------------

<h1>Barcode Scanner</h1>

  <!-- Buttons to control the scanner -->
  <button id="start-button">Start Scan</button>
  <button id="stop-button" disabled>Stop Scan</button>

  <!-- Video feed for barcode detection -->
  <video autoplay style="width: 100%; max-height: 300px;"></video>

  <!-- Placeholder to display detected barcode -->
  <p id="barcode">Waiting...</p>

  <script>
    // WebAssembly polyfill for some browsers
    try { window['BarcodeDetector'].getSupportedFormats() }
    catch { window['BarcodeDetector'] = barcodeDetectorPolyfill.BarcodeDetectorPolyfill }

    let video;
    let barcodeDetector;
    let scanning = false; // To control the scanning loop
    let stream = null; // For stopping the video feed

    async function startBarcodeScanner() {
      // Initialize video and BarcodeDetector
      video = document.querySelector('video');
      barcodeDetector = new BarcodeDetector({ formats: ["ean_13", "ean_8", "upc_a", "upc_e"] });

      // Get a stream for the rear camera
      stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
      video.srcObject = stream;

      // Set scanning status to true
      scanning = true;

      // Start scanning loop
      let array = ['30511288', '80582533', '00426814', '80507892']

      while (scanning) {
        try {
          // Detect barcodes in the current video frame
          const barcodes = await barcodeDetector.detect(video);

          // Continue loop if no barcode was found
          if (barcodes.length === 0) {
            await new Promise(r => setTimeout(r, 50));
            continue;
          }

          // Handle the first detected barcode
          const barcodeValue = barcodes[0].rawValue;
          document.getElementById("barcode").innerText = barcodeValue;

          // Send to API
          sendBarcodeToAPI(barcodeValue)

          let randomIndex = Math.floor(Math.random() * array.length);

          // Access the random element using the index
          let randomElement = array[randomIndex];

          // Update table
          markMatches(barcodeValue)

          // Play a sound signal for successful detection
          playSignalSound();

          // Pause scanning for a short time (e.g., 2 seconds)
          scanning = false;
          setTimeout(() => {
            document.getElementById("start-button").disabled = false;
            document.getElementById("stop-button").disabled = true;
            document.getElementById("barcode").innerText = "Scan complete. Press Start to scan again.";
          }, 2000);

        } catch (error) {
          // Handle any errors in the detection process
          await new Promise(r => setTimeout(r, 200));
        }
      }
    }

    function stopBarcodeScanner() {
      scanning = false;

      // Stop video stream if active
      if (stream) {
        const tracks = stream.getTracks();
        tracks.forEach(track => track.stop());
        stream = null;
      }

      document.getElementById("start-button").disabled = false;
      document.getElementById("stop-button").disabled = true;
      document.getElementById("barcode").innerText = "Scanner stopped. Press Start to scan.";
    }

    function playSignalSound() {
      // Play a simple beep sound using the Web Audio API
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      oscillator.type = "sine"; // Simple sine wave
      oscillator.frequency.setValueAtTime(440, audioContext.currentTime); // A4 note (440 Hz)
      oscillator.connect(audioContext.destination);
      oscillator.start();
      oscillator.stop(audioContext.currentTime + 0.2); // Play for 0.2 seconds
    }

    function sendBarcodeToAPI(barcode){
      fetch("/barcodes/process", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector("meta[name=csrf-token]").content,
        },
        body: JSON.stringify({ barcode_data: barcode }),
      }).then(response => response.json())
        .then(result => console.log(result))
        .catch(error => console.error('Error:', error));
    }

    // Button event listeners
    document.getElementById("start-button").addEventListener("click", async () => {
      document.getElementById("start-button").disabled = true;
      document.getElementById("stop-button").disabled = false;
      document.getElementById("barcode").innerText = "Scanning...";
      await startBarcodeScanner();
    });

    document.getElementById("stop-button").addEventListener("click", stopBarcodeScanner);

  </script>

  <script>
    function markMatches(number) {
      alert(number)
      // Example list of 8-digit codes to search for
      let codesToSearch = []
      codesToSearch.push(number.toString());
      console.log(codesToSearch)

      // Get the table rows
      const table = document.getElementById('table');
      const rows = table.getElementsByTagName('tr');

      // Reset any previously highlighted rows
      for (let row of rows) {
        row.style.backgroundColor = ''; // Reset background
      }

      // Iterate through the list of codes to search for
      for (let code of codesToSearch) {
        let found = false;

        // Check each row for the code
        for (let i = 1; i < rows.length; i++) { // Skip the header row
          const cells = rows[i].getElementsByClassName('barcode');
          for (let cell of cells) {
            // Match the exact 8-digit code
            if (cell.innerText.trim() === code) {
              // Highlight the row if the code is found
              rows[i].lastElementChild.innerHTML = 'âœ…';
              found = true;
              break;
            }
          }
          if (found) break; // Stop searching this table if found
        }

        // Log if code is not found
        if (!found) {
          console.log(`Code ${code} not found in the table.`);
        }
      }
    }
  </script>